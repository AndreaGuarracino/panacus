#!/usr/bin/env python3

#
# std import
#
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter as ADHF
from sys import stdout, stderr, exit
from functools import partial
from os import fdopen, path
import re

#
# third party packages
#

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

from sklearn.linear_model import LinearRegression
from scipy.optimize import curve_fit
import seaborn as sns

PAT_PANACUS = re.compile('^#.+panacus (\S+) (.+)')

def humanize_number(i, precision=0):

    assert i >= 0, f'non-negative number assumed, but received "{i}"'

    order = 0
    x = i
    if i > 0:
        order = int(np.log10(i))//3
        x = i/10**(order*3)

    human_r= ['', 'K', 'M', 'B', 'D']
    return '{:,.{prec}f}{:}'.format(x, human_r[order], prec=precision)


def calibrate_yticks_text(yticks):
    prec = 0
    yticks_text = list(map(partial(humanize_number, precision=prec), yticks))
    while len(set(yticks_text)) < len(yticks_text):
        prec += 1
        yticks_text = list(map(partial(humanize_number, precision=prec), yticks))

    return yticks_text

def fit(Y, func):
    X = np.arange(len(Y))+1
    popt, pcov = curve_fit(func, X, Y, p0=[1, 1], maxfev=1000*len(Y))
    return popt, func(X, *popt)

def fit_gamma(Y):
    return fit(Y, lambda x, *y: y[0]*x**y[1])

def fit_alpha(Y):
    return fit(Y, lambda x, *y:  y[0]*x**(-y[1]))


def plot_hist(df, fname, counttype, out, loc='lower left'):

    # setup fancy plot look
    sns.set_theme(style='darkgrid')
    sns.set_color_codes('colorblind')
    sns.set_palette('husl')
    sns.despine(left=True, bottom=True)

    df.plot.bar(figsize=(10, 6))
    plt.xticks(rotation=65)

    yticks, _ = plt.yticks()
    plt.yticks(yticks, calibrate_yticks_text(yticks))

    plt.title(f'coverage histogram for #{counttype}s ({fname})')
    plt.legend(loc=loc)

    plt.tight_layout()
    plt.savefig(out, format='pdf')
    plt.close()

def plot_growth(df, fname, counttype, out, loc='lower left', estimate_growth=False):

    # setup fancy plot look
    sns.set_theme(style='darkgrid')
    sns.set_color_codes('colorblind')
    sns.set_palette('husl')
    sns.despine(left=True, bottom=True)

    # let's do it!
    if estimate_growth and (df.columns.levels[1] > 1/df.shape[0]).any():
        f, axs = plt.subplots(2,1, figsize=(10, 12))
    else:
        f, ax = plt.subplots(1,1, figsize=(10, 6))
        axs = [ax]

    popts = list()
    for i, (c,q) in enumerate(df.columns):
        df[(c, q)].plot.bar(color=f'C{i}', label=f'coverage $\geq {c}$, quorum $\geq {q}$%', ax=axs[0])
        if estimate_growth and q < 1/df.columns.shape[0]:
            popt, curve = fit_gamma(df[(c,q)].array)
            popts.append((c, q, popt, i))
            axs[0].plot(curve, '--',  color='black', label=f'coverage $\geq {c}$, quorum $\geq {q}$%, $k_1 X^γ$ with $k_1$={humanize_number(popt[0],1)}, γ={popt[1]:.3f})')
    axs[0].set_xticklabels(axs[0].get_xticklabels(), rotation=65)

    yticks = axs[0].get_yticks()
    axs[0].set_yticklabels(calibrate_yticks_text(yticks))

    axs[0].set_title(f'Pangenome growth ({fname})')
    axs[0].set_ylabel(f'#{counttype}')
    axs[0].set_xlabel('samples')
    axs[0].legend(loc=loc)

    if popts:
        for c, q, _, i in popts:
            x = np.zeros(df.shape[0])
            x[1:] = df.loc[:df.shape[0]-1, (c, q)]
            (df[(c, q)] - x).plot.bar(color=f'C{i}', label=f'coverage $\geq {c}$, quorum $\geq {q}$%', ax=axs[1])
            popt, _ = fit_alpha((df.loc[2:, (c, q)] - x[1:]).array)
            k2 = popt[0]
            alpha = popt[1]
            Y = k2*np.arange(df.shape[0])**(-alpha)
            axs[1].plot(Y, '--',  color='black', label=f'coverage $\geq {c}$, quorum $\geq {q}$%, $k_2 X^{{-α}}$ with $k_2$={humanize_number(k2,1)}, α={alpha:.3f})')

        axs[1].set_xticklabels(axs[0].get_xticklabels(), rotation=65)

        yticks = axs[1].get_yticks()
        axs[1].set_yticklabels(calibrate_yticks_text(yticks))

        axs[1].set_title('$F_{new}$')
        axs[1].set_ylabel(f'#{counttype}s')
        axs[1].set_xlabel('samples')
        axs[1].legend(loc=loc)

    plt.tight_layout()
    plt.savefig(out, format='pdf')
    plt.close()


def get_panacus_command_counttype(data):

    header = next(data)
    m = PAT_PANACUS.match(header)

    if not m:
        print(f'Input file "{data.name}" has wrong header. It doesn\'t seem to be generated by panacus, exiting.', file=stderr)
        exit(1)

    command, arg_list = m.groups()
    arg_list = arg_list.split(' ')
    counttype = 'node'
    if '-c' in arg_list:
        counttype = arg_list[arg_list.index('-c')+1]
    elif '--count' in arg_list:
        counttype = arg_list[arg_list.index('--count')+1]

    return command, counttype


if __name__ == '__main__':
    description='''
    Visualize growth stats. PDF file will be plotted to stdout.
    '''
    parser = ArgumentParser(formatter_class=ADHF, description=description)
    parser.add_argument('stats', type=open,
            help='Growth/Histogram table computed by panacus')
    parser.add_argument('-e', '--estimate_growth_params', action='store_true',
            help='Estimate growth parameters based on least-squares fit')
    parser.add_argument('-l', '--legend_location', 
            choices = ['lower left', 'lower right', 'upper left', 'upper right'], 
            default = 'lower left',
            help='Estimate growth parameters based on least-squares fit')

    args = parser.parse_args()

    with open(args.stats.name) as growth:
        command, counttype = get_panacus_command_counttype(growth)

    if command in ['ordered-histgrowth', 'histgrowth', 'growth']:
        df = pd.read_csv(args.stats, sep='\t', header=[1,2], index_col=[0])
        df.columns = df.columns.map(lambda x: (int(x[0]), float(x[1][:-1])))
        df = df.reindex(sorted(df.columns, key=lambda x: (x[1], x[0])), axis=1)
        with fdopen(stdout.fileno(), 'wb', closefd=False) as out:
            plot_growth(df, path.basename(args.stats.name), counttype, out,
                    loc=args.legend_location,
                    estimate_growth=args.estimate_growth_params)
    elif command == 'hist':
        df = pd.read_csv(args.stats, sep='\t', header=[1], index_col=[0])
        with fdopen(stdout.fileno(), 'wb', closefd=False) as out:
            plot_hist(df, path.basename(args.stats.name), counttype, out,
                    loc=args.legend_location)
    else:
        print(f'This script cannot visualize the contents of input file {args.stats.name}, exiting.', file=stderr)
        exit(1)


